/*
 * 练习题 2.65
 *
 * Return 1 when x contains an even number of 1s; 0 otherwise.
 * Assume w=32
 */
int even_ones(unsigned x)
{
	x ^= x >> 16;
	x ^= x >> 8;
	x ^= x >> 4;
	x ^= x >> 2;
	x ^= x >> 1;

	/* 注意：在第 0 位之外的位，值不一定为 0 */
	return !(x & 1);
}
// 异或可以看成是没有进位的加法，把x的前一半跟后一半进行异或，
// 如果对应位置上都是1，那么结果对应位置上是0，如果有一个1，一个0，那么结果是1，等于说
// 每进行一轮异或操作，会消除2的倍数个1，直到x剩下最低两位时，如果x0，x1都为1，说明总共有2n+2个1；若都为0，说明有2n个；一个1一个0，说明有2n+1个，
// 其中2n就是前面所有异或操作中消去的1的个数。